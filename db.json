{
  "folders": [
    {
      "id": "a3J2dD70",
      "name": "SQL",
      "defaultLanguage": "sql",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "createdAt": 1721914781261,
      "updatedAt": 1721971028536,
      "index": 0
    },
    {
      "name": "C/C++",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "c_cpp",
      "id": "Yw8pt8qI",
      "createdAt": 1721915030887,
      "updatedAt": 1721971034631,
      "index": 1
    },
    {
      "name": "Python",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "python",
      "id": "cJDhE0wQ",
      "createdAt": 1721915043541,
      "updatedAt": 1721971046478,
      "index": 2
    },
    {
      "name": "HTML",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "html",
      "id": "H4Pcaroy",
      "createdAt": 1721915054654,
      "updatedAt": 1721971056862,
      "index": 3
    },
    {
      "name": "CSS",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "css",
      "id": "deX-NgHx",
      "createdAt": 1721915061449,
      "updatedAt": 1721971063902,
      "index": 4
    },
    {
      "name": "Vue",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "vue",
      "id": "ISb5bYG8",
      "createdAt": 1721915067426,
      "updatedAt": 1721971079012,
      "index": 5
    },
    {
      "name": "JavaScript",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "javascript",
      "id": "0UbdBBJN",
      "createdAt": 1721971080945,
      "updatedAt": 1721971097751
    },
    {
      "name": "C#",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "csharp",
      "id": "DscWMix7",
      "createdAt": 1721971101423,
      "updatedAt": 1721971116436
    },
    {
      "name": "Java",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "java",
      "id": "1VrLx0IY",
      "createdAt": 1721971147366,
      "updatedAt": 1721971164420
    }
  ],
  "snippets": [
    {
      "isDeleted": false,
      "isFavorites": true,
      "folderId": "a3J2dD70",
      "tagsIds": [],
      "description": null,
      "name": "Oracle创建一个只能查询的新账户",
      "content": [
        {
          "label": "子片段 1",
          "language": "sql",
          "value": "-- 创建一个新用户，指定用户名，密码\nCREATE USER new_user IDENTIFIED BY your_password; \n-- 授予用户连接选项，不然用户无法连接数据库\nGRANT CONNECT TO new_user; \n-- 授予用户对某张表的查询权限\nGRANT SELECT ON schema_owner.ERP_SHEDULE_SHEET TO new_user; \nGRANT SELECT ON schema_owner.TRACK_MATERIAL TO new_user;\n-- 授予用户数据管理员权限\nGRANT DBA TO FCEL2;"
        }
      ],
      "id": "lFXOrMMK",
      "createdAt": 1721914969710,
      "updatedAt": 1725717663714
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "qiJo0wF7",
        "wiCDG8SZ",
        "1Jb6lpUM"
      ],
      "description": null,
      "name": "数据库操作",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "FormatString\ts;  // 定义格式化字符串方法\nconst char*\t\tsql; //定义一个数据库查询\n_CommandPtr\t\tcmd; // 数据库查询命令\n_RecordsetPtr\trs; // 数据库查询结果指针\n\nDatabase\tdba1(\"dba.udl\"); // 使用udl文件定义数据库连接\nif (dba.IsConnected() == false) // 鲁棒性判断，防止数据库没有连接成功\n\t{\n\t\tALARM(AL_WARNING, 1003, true, \"数据库连接已断开,重新连接。。。\");\n\t\tdba.Connect(\"dba.udl\");\n\t}\n\nsql = s(\"select SLAB_ID from TRACK_MATERIAL where ZONE_CODE = 4000 and XPOS = (select min(XPOS) from TRACK_MATERIAL where ZONE_CODE = 4000)\"); //  数据库查询命令书写\ncmd = dba.CreateCommand(); // 创建一个次年度数据库查询对象\ncmd->CommandText = (_bstr_t)sql; // 给对象中的查询语句赋值\nrs = cmd->Execute(NULL, 0, adCmdText); // 执行查询,获取查询结果的指针\n\nint cnt = rs->GetRecordCount(); // 获取数据库查询得到的数据总量\n\nwhile (!rs->adoEOF)  // 在指针没有到结尾时，逐行处理数据\n\t{\n    /*\n    数据库操作代码，包括根据数据库读取结果进行变脸赋值，更新数据库中某一条目，\n    */\n\n\t\trs->MoveNext(); // 指针指向下一条数据\n\n\t}\n\tdba1.Disconnect(); // 断开数据库连接"
        }
      ],
      "id": "xJqmmXuE",
      "createdAt": 1721957199101,
      "updatedAt": 1727493005638
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "qiJo0wF7",
        "V6iF2I4j"
      ],
      "description": null,
      "name": "创建事务",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "dba.BeginTrans(\"dba.udl\"); // 连接数据库创建事务\nsql = s(\"insert into TB_PRODUCT_HIS select * from TB_PRODUCT where DISCHARGE_TIME<sysdate-90\");  // 事务语句\ncmd = dba.CreateCommand(); \ncmd->CommandText = (_bstr_t)sql;\ncmd->Execute(NULL, 0, adCmdText); // 执行查询\ndba.CommitTrans(\"dba.udl\"); 、// 事务提交\n// dba.RollbackTrans; 事务回滚"
        }
      ],
      "id": "Tue5u7oh",
      "createdAt": 1721959080848,
      "updatedAt": 1723959574026
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "olQfjjLQ",
        "VqKC7a91",
        "877M1sfA"
      ],
      "description": "对实时数据进行平滑，利用历史数据中的中位数代替实时数据，减缓数据的波动",
      "name": "中位数平滑算法",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "//! 创建一个临时vector，将原始的数据导入进来\nstd::vector<float> sortedBuffer = dataBuffer; \n//! deque 向vector赋值需要使用如下方式\nstd::vector<float> sortedBuffer(dataBuffer.begin(), dataBuffer.end());\n/**\n * @brief 部分排序一个序列\n *\n * 使得第n个元素（称为枢轴）放置在正确的位置上，使得所有在它左边的元素都不大于它，\n * 所有在它右边的元素都不小于它。这个操作并不保证除了这个枢轴位置以外的其他元素是排序好的。\n *\n * @param sortedBuffer.begin() 指定了要操作的序列的开始位置\n * @param sortedBuffer.begin()+sortedBuffer.size()/2 指定了你想要正确放置的元素的位置，也就是中位数的位置。\n * 由于sortedBuffer.size()/2取的是整数除法的结果，所以当容器大小是偶数时，这个位置实际上是指向了两个中间值中的后一个。\n * @param sortedBuffer.end() 指定了要操作的序列的结束位置\n */\nstd::nth_element(sortedBuffer.begin(), sortedBuffer.begin() + sortedBuffer.size()/2, sortedBuffer.end()); \n//! 获取中位数值\nfloat medianValue = sortedBuffer[sortedBuffer.size()/2];"
        }
      ],
      "id": "Kdku6H2O",
      "createdAt": 1723959504976,
      "updatedAt": 1727100589677
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "olQfjjLQ",
        "-5hHasNq",
        "6DGis_cO"
      ],
      "description": null,
      "name": "分位数平滑算法",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "#include <vector>\n#include <algorithm>\nstd::vector<float> data = { /* 初始化你的数据 */ };\n\n//! 首先对向量进行排序，默认进行升序排列\nstd::sort(data.begin(), data.end());\n\n//! 降序排序算法\n// std::sort(data.begin(), data.end(), [](float a, float b) { return a > b; }); // 降序排序\n//! 计算截取的起始和结束位置\nsize_t start = data.size() * 0.30;\nsize_t end = data.size() * 0.60;\n\n// 确保start和end在有效范围内\nif (start > data.size()) start = data.size();\nif (end > data.size()) end = data.size();\n\n// 截取30%到60%的数据\nstd::vector<float> sliced_data(data.begin() + start, data.begin() + end);\n"
        }
      ],
      "id": "78TbSqQt",
      "createdAt": 1723962180806,
      "updatedAt": 1723962561165
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "oymDhoMO"
      ],
      "description": null,
      "name": "计算平均值",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "//! 创建向量数据\nstd::vector<float> sliced_data = { /* 初始化你的数据，例如：1.0f, 2.0f, 3.0f, 4.0f, 5.0f */ };\n\n//! 累加器清空\nfloat sum = 0.0f;\n\n//! 使用auto快速遍历累加\nfor (const auto& value : sliced_data) {\n\tsum += value;\n}\n//! 除以元素个数\nfloat average = sum / sliced_data.size();"
        }
      ],
      "id": "09jg2uO8",
      "createdAt": 1723962591080,
      "updatedAt": 1723965020795
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "dZIEd2vu",
        "6_2rdfLQ"
      ],
      "description": null,
      "name": "读取INI文件",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <string>\n#include <unordered_map>\n#include <map>\n\n/**\n * @brief A class to read and parse INI configuration files.\n */\nclass INIReader\n{\npublic:\n    /**\n     * @brief Loads and parses an INI file.\n     *\n     * This function reads the INI file line by line, identifies sections and key-value pairs,\n     * and stores them in an internal data structure for later retrieval.\n     *\n     * @param filename The path to the INI file to load.\n     * @return true if the file was successfully loaded and parsed, false otherwise.\n     */\n    bool Load(const std::string &filename)\n    {\n        std::ifstream file(filename);\n        if (!file.is_open())\n        {\n            std::cerr << \"Could not open file: \" << filename << std::endl;\n            return false;\n        }\n\n        std::string line;\n        std::string currentSection;\n        while (std::getline(file, line))\n        {\n            line = Trim(line);\n\n            // Skip empty lines and comments\n            if (line.empty() || line[0] == ';' || line[0] == '#')\n            {\n                continue;\n            }\n\n            // Identify section headers\n            if (line.front() == '[' && line.back() == ']')\n            {\n                currentSection = line.substr(1, line.size() - 2);\n            }\n            else\n            {\n                // Identify key-value pairs\n                auto delimiterPos = line.find('=');\n                if (delimiterPos != std::string::npos)\n                {\n                    std::string key = Trim(line.substr(0, delimiterPos));\n                    std::string value = Trim(line.substr(delimiterPos + 1));\n                    data[currentSection][key] = value;\n                }\n            }\n        }\n\n        file.close();\n        return true;\n    }\n\n    /**\n     * @brief Retrieves a value from the INI file based on section and key.\n     *\n     * If the section or key does not exist, this function will return a default value.\n     *\n     * @param section The section name where the key is located.\n     * @param key The key whose value is to be retrieved.\n     * @param defaultValue The default value to return if the key is not found (optional).\n     * @return The value corresponding to the key, or the default value if the key is not found.\n     */\n    std::string Get(const std::string &section, const std::string &key, const std::string &defaultValue = \"\") const\n    {\n        auto sectionIt = data.find(section);\n        if (sectionIt != data.end())\n        {\n            auto keyIt = sectionIt->second.find(key);\n            if (keyIt != sectionIt->second.end())\n            {\n                return keyIt->second;\n            }\n        }\n        return defaultValue;\n    }\n\n    /**\n     * @brief Sets a value in the INI configuration.\n     * @param section The section name where the key is located.\n     * @param key The key whose value is to be set.\n     * @param value The value to set for the specified key.\n     */\n    void Set(const std::string &section, const std::string &key, const std::string &value)\n    {\n        data[section][key] = value;\n    }\n\n    /**\n     * @brief Writes the current configuration to an INI file.\n     * @param filename The path to the INI file to write.\n     * @return true if the file was successfully written, false otherwise.\n     */\n    bool Save(const std::string &filename) const\n    {\n        std::ofstream file(filename);\n        if (!file.is_open())\n        {\n            std::cerr << \"Could not open file: \" << filename << std::endl;\n            return false;\n        }\n\n        for (const auto &sectionPair : data)\n        {\n            file << \"[\" << sectionPair.first << \"]\\n\";\n            for (const auto &kv : sectionPair.second)\n            {\n                file << kv.first << \" = \" << kv.second << \"\\n\";\n            }\n            file << \"\\n\";\n        }\n\n        file.close();\n        return true;\n    }\n\nprivate:\n    /**\n     * @brief A map to store sections and their corresponding key-value pairs.\n     *\n     * The outer map's key is the section name, and the inner map stores key-value pairs within that section.\n     */\n    std::unordered_map<std::string, std::map<std::string, std::string>> data;\n\n    /**\n     * @brief Trims whitespace from both ends of a string.\n     *\n     * This utility function removes leading and trailing whitespace characters\n     * (spaces and tabs) from the given string.\n     *\n     * @param str The string to trim.\n     * @return A new string with leading and trailing whitespace removed.\n     */\n    static std::string Trim(const std::string &str)\n    {\n        const std::string whitespace = \" \\t\";\n        const auto strBegin = str.find_first_not_of(whitespace);\n        if (strBegin == std::string::npos)\n        {\n            return \"\"; // No content\n        }\n\n        const auto strEnd = str.find_last_not_of(whitespace);\n        const auto strRange = strEnd - strBegin + 1;\n\n        return str.substr(strBegin, strRange);\n    }\n};\n\n/**\n * @brief Entry point for the INI reader program.\n *\n * This main function demonstrates how to load an INI file and retrieve values\n * from it using the INIReader class.\n *\n * @return int Returns 0 on successful execution.\n */\n\nint main()\n{\n    INIReader reader;\n\n    // 加载配置文件\n    if (reader.Load(\"config.ini\"))\n    {\n        std::string host = reader.Get(\"network\", \"host\", \"localhost\");\n        std::string port = reader.Get(\"network\", \"port\", \"8080\");\n\n        std::cout << \"Host: \" << host << std::endl;\n        std::cout << \"Port: \" << port << std::endl;\n\n        // 修改配置并保存\n        reader.Set(\"network\", \"host\", \"10.0.0.1\");\n        reader.Set(\"network\", \"port\", \"9090\");\n        reader.Save(\"config_modified.ini\");\n\n        std::cout << \"Updated configuration saved to config_modified.ini\" << std::endl;\n    }\n\n    return 0;\n}"
        }
      ],
      "id": "HEiOTpNN",
      "createdAt": 1723991600741,
      "updatedAt": 1723992684700
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "tO8O6gJG",
        "5vjFnMST"
      ],
      "description": null,
      "name": "POST请求",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "std::string sendPostRequest() {\n\tCURL* curl;\n\tCURLcode res;\n\tstd::string readBuffer;\n\n\tcurl_global_init(CURL_GLOBAL_DEFAULT);\n\tcurl = curl_easy_init();\n\tif (!curl) {\n\n\t\tcurl_global_cleanup();\n\t\treturn \"\";\n\n\t}\n\n\tstruct curl_slist* headers = nullptr;\n\theaders = curl_slist_append(headers, \"Content-Type: application/json; charset=utf-8\");\n\t//headers = curl_slist_append(headers, \"Accept: application/json; charset=utf-8\");\n\tif (!headers) {\n\t\tcurl_easy_cleanup(curl);\n\t\tcurl_global_cleanup();\n\t\treturn \"\";\n\t}\n\tcurl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n\tcurl_easy_setopt(curl, CURLOPT_POSTFIELDS, head.c_str());\n\tcurl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n\tcurl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);\n\tcurl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);\n\n\tres = curl_easy_perform(curl);\n\tif (res != CURLE_OK) {\n\t\t//std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\t\tcurl_easy_cleanup(curl);\n\t\tcurl_slist_free_all(headers);\n\t\tcurl_global_cleanup();\n\t\treturn \"\"; // 直接返回，退出函数\n\t}\n\n\tcurl_easy_cleanup(curl);\n\tcurl_slist_free_all(headers);\n\n\tcurl_global_cleanup();\n\tstd::cout << UTF8ToGB2312(readBuffer) << std::endl;\n\treturn readBuffer;\n  }\n  \n  nlohmann::json extractRows(const std::string& jsonString) {\n\ttry {\n\t\t// 解析输入的 JSON 字符串\n\t\tnlohmann::json jsonResponse = nlohmann::json::parse(jsonString);\n\n\t\t// 检查是否包含 __blocks__, result 和 rows\n\t\tif (jsonResponse.contains(\"__blocks__\") &&\n\t\t\tjsonResponse[\"__blocks__\"].contains(\"result\") &&\n\t\t\tjsonResponse[\"__blocks__\"][\"result\"].contains(\"rows\")) {\n\n\t\t\t// 提取 rows 内容\n\t\t\treturn jsonResponse[\"__blocks__\"][\"result\"][\"rows\"];\n\t\t}\n\t\telse {\n\t\t\tthrow std::runtime_error(\"JSON 中不包含指定的结构。\");\n\t\t}\n\t}\n\tcatch (const nlohmann::json::exception& e) {\n\t\tthrow std::runtime_error(std::string(\"JSON 解析错误: \") + e.what());\n\t}\n}\n\nstatic size_t WriteCallback(void* contents, size_t size, size_t nmemb, std::string* s) {\n\tsize_t newLength = size * nmemb;\n\ttry {\n\t\ts->append((char*)contents, newLength);\n\t}\n\tcatch (std::bad_alloc&) {\n\t\t// 内存分配失败时返回0\n\t\treturn 0;\n\t}\n\treturn newLength;\n}"
        }
      ],
      "id": "cbhlrf2z",
      "createdAt": 1724812389483,
      "updatedAt": 1727267007703
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "rNP4l83Z"
      ],
      "description": null,
      "name": "执行数据库过程",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "const char*\t\tsql;\n_CommandPtr\t\tcmd;\n-- 输入数据库中过程名称\nsql = s(\"CHECK_PDI\");\n-- 创建数据库命令\ncmd = dba1.CreateCommand();\n-- 将数据库语句赋给查询命令\ncmd->CommandText = (_bstr_t)sql;\n-- 设置数据库语句执行类型为过程\ncmd->CommandType = adCmdStoredProc;\n-- 执行数据库语句，设置为数据库过程\ncmd->Execute(NULL, 0, adCmdStoredProc);"
        }
      ],
      "id": "ngZDQTEy",
      "createdAt": 1725846698487,
      "updatedAt": 1725846862101
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "1VrLx0IY",
      "tagsIds": [
        "1q3yNmto"
      ],
      "description": null,
      "name": "java定时执行",
      "content": [
        {
          "label": "子片段 1",
          "language": "java",
          "value": "public List query(){\n        List<TB_PDI> tbPdis = tbPdiMapper.find();\n        // 频繁对页面中的计划重新排序会导致资源死锁，因此使用定时器进行刷新\n        if (lastSortTime == null || new Date().getTime() - lastSortTime.getTime() > 2 * 60 * 1000) {\n            tbPdiMapper.Sort();\n            lastSortTime = new Date();\n        }\n        return tbPdis;\n    }"
        }
      ],
      "id": "YqJuSk_q",
      "createdAt": 1726740705983,
      "updatedAt": 1726740745111
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "bVFKybKW",
        "0NHs4HLy",
        "olQfjjLQ"
      ],
      "description": null,
      "name": "指数移动平滑",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "#include <iostream>\n\nclass EMAFilter {\npublic:\n    EMAFilter(float alpha) : alpha(alpha), filteredValue(0), initialized(false) {}\n\n    float filter(float newValue) {\n        if (!initialized) {\n            filteredValue = newValue;\n            initialized = true;\n        } else {\n            filteredValue = alpha * newValue + (1 - alpha) * filteredValue;\n        }\n        return filteredValue;\n    }\n\nprivate:\n    float alpha;\n    float filteredValue;\n    bool initialized;\n};\n\nint main() {\n    EMAFilter ema(0.1); // 设置平滑系数 alpha = 0.1\n    float sensorData[] = {25.0, 26.5, 30.2, 29.8, 31.0, 30.5};\n    \n    for (float data : sensorData) {\n        std::cout << \"Filtered Value: \" << ema.filter(data) << std::endl;\n    }\n    \n    return 0;\n}\n"
        }
      ],
      "id": "COgO8IZM",
      "createdAt": 1727100310446,
      "updatedAt": 1727100379156
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [],
      "description": null,
      "name": "定时器",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "#include <thread>\n#include <chrono>\nwhile (true) {\n\t\tPostToDB();\n\t\tstd::this_thread::sleep_for(std::chrono::minutes(time)); // 每隔2分钟执行一次\n\t}"
        }
      ],
      "id": "F5rEQgWA",
      "createdAt": 1727266694006,
      "updatedAt": 1727266729757
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [],
      "description": null,
      "name": "字符串切片",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "void ExtractSubstringBeforeChar(const char* input, char sym, char* res)\n{\n    // 参数检查，确保输入字符串和输出缓冲区不为空\n    if (input == nullptr || res == nullptr) {\n        return; // 如果输入无效则直接返回\n    }\n\n    // 查找符号在字符串中的位置\n    const char* position = strchr(input, sym);\n    \n    if (position != nullptr) {\n        // 计算符号之前部分的长度\n        size_t length = position - input;\n        \n        // 确保res有足够的空间, 在生产代码中最好提供一个长度参数来控制\n        strncpy(res, input, length);\n        res[length] = '\\0'; // 确保以null字符结尾\n    }\n    else {\n        // 如果没有找到符号，则复制整个字符串\n        strcpy(res, input);\n    }\n}"
        }
      ],
      "id": "snDA9sDZ",
      "createdAt": 1727493012988,
      "updatedAt": 1727493341806
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "a3J2dD70",
      "tagsIds": [
        "mFoRiI9Z"
      ],
      "description": null,
      "name": "字段值是否唯一",
      "content": [
        {
          "label": "子片段 1",
          "language": "sql",
          "value": "SELECT PLAN_ID\nFROM FCE.TB_MES_OSQ\nWHERE WORK_STATUS = 'N' AND (MAT_NUM - CHARGEDNUM) > 0\nGROUP BY PLAN_ID\nHAVING COUNT(PLAN_ID) > 1;"
        }
      ],
      "id": "cQVfme3q",
      "createdAt": 1729602575017,
      "updatedAt": 1729602635779
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "a3J2dD70",
      "tagsIds": [
        "FpyQ_9eV",
        "RzQcsckp",
        "uls7FV_M"
      ],
      "description": null,
      "name": "空值赋uid",
      "content": [
        {
          "label": "子片段 1",
          "language": "sql",
          "value": "UPDATE TB_MES_OSQ\n    SET JOB_NO = RAWTOHEX(SYS_GUID())\n    WHERE JOB_NO IS NULL OR TRIM(JOB_NO) IN ('', ' ');"
        }
      ],
      "id": "hCmCNR1q",
      "createdAt": 1729602638441,
      "updatedAt": 1729602683078
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "a3J2dD70",
      "tagsIds": [
        "l9soUARk",
        "tKcP8dhW"
      ],
      "description": null,
      "name": "交换计划",
      "content": [
        {
          "label": "子片段 1",
          "language": "sql",
          "value": "CREATE OR REPLACE PROCEDURE FCEL2.EXPDI(\nV_NEWSEQ IN VARCHAR2,\nV_CARD_ID IN VARCHAR2,\nV_RLNO IN VARCHAR2\n) AS\nN_SEQ NUMBER;\nT_CARD_ID VARCHAR2(128);\nT_RLNO VARCHAR2(128);\nBEGIN\n   SAVEPOINT start_of_transaction;\n   -- 查询交换目标的轧制号，工作号\n   SELECT ROLLING_PLAN_CODE, CARD_ID INTO T_RLNO, T_CARD_ID  FROM FCEL2.V_TB_PDI WHERE SCHEDULE_SEQ=V_NEWSEQ;\n   -- 查询当前计划对应的编号\n   SELECT SCHEDULE_SEQ INTO N_SEQ FROM FCEL2.V_TB_PDI WHERE ROLLING_PLAN_CODE=V_RLNO AND CARD_ID=V_CARD_ID;\n--   SELECT SCHEDULE_SEQ INTO N_SEQ FROM FCEL2.V_TB_PDI WHERE ROLLING_PLAN_CODE=V_RLNO;\n   -- 把交换目标的序号改了\n   \n--   UPDATE FCE.TB_MES_OSQ SET PLAN_ID=N_SEQ WHERE RLNO=T_RLNO AND JOB_NO=T_CARD_ID;\n   UPDATE FCE.TB_MES_OSQ SET PLAN_ID=N_SEQ WHERE WORK_STATUS = 'N' AND (MAT_NUM - CHARGEDNUM) > 0 AND RLNO=T_RLNO AND JOB_NO=T_CARD_ID;\n   -- 把当前计划的序号改了\n--   UPDATE FCE.TB_MES_OSQ SET PLAN_ID=V_NEWSEQ WHERE RLNO=V_RLNO AND JOB_NO=V_CARD_ID;\n   UPDATE FCE.TB_MES_OSQ SET PLAN_ID=V_NEWSEQ WHERE WORK_STATUS = 'N' AND (MAT_NUM - CHARGEDNUM) > 0 AND RLNO=V_RLNO AND JOB_NO=V_CARD_ID;\n   COMMIT;  -- 添加提交操作\n   EXCEPTION\n     WHEN NO_DATA_FOUND THEN\n       NULL;\n     WHEN OTHERS THEN\n     ROLLBACK TO SAVEPOINT start_of_transaction;\n       -- Consider logging the error and then re-raise\n       RAISE;\nEND EXPDI;\n/\n"
        }
      ],
      "id": "Fbt9DowM",
      "createdAt": 1729643852533,
      "updatedAt": 1729643875349
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "a3J2dD70",
      "tagsIds": [
        "unl4Q6rt",
        "Gfqv_F--",
        "tKcP8dhW"
      ],
      "description": null,
      "name": "上移下移",
      "content": [
        {
          "label": "子片段 1",
          "language": "sql",
          "value": "CREATE OR REPLACE PROCEDURE FCE.UpDown(\n    P_JOB_NO IN VARCHAR2,\n    FLAG IN NUMBER\n) IS\n    P_ID NUMBER;\n    P_TARGET_ID NUMBER;\n    P_TARGET_JOB_NO VARCHAR2(64);\nBEGIN\n    BEGIN\n        SELECT PLAN_ID INTO P_ID \n        FROM TB_MES_OSQ \n        WHERE JOB_NO = P_JOB_NO AND MAT_NUM - CHARGEDNUM > 0 AND work_STATUS = 'N';\n    EXCEPTION\n        WHEN NO_DATA_FOUND THEN\n            DBMS_OUTPUT.PUT_LINE('No matching PLAN_ID found for given JOB_NO.');\n            RETURN;\n    END;\n    \n    IF FLAG = 1 THEN\n        SELECT MIN(PLAN_ID) INTO P_TARGET_ID  \n        FROM TB_MES_OSQ \n        WHERE PLAN_ID > P_ID AND MAT_NUM - CHARGEDNUM > 0 AND work_STATUS = 'N';\n    ELSIF FLAG = -1 THEN\n        SELECT MAX(PLAN_ID) INTO P_TARGET_ID  \n        FROM TB_MES_OSQ \n        WHERE PLAN_ID < P_ID AND MAT_NUM - CHARGEDNUM > 0 AND work_STATUS = 'N';\n    ELSE\n        DBMS_OUTPUT.PUT_LINE('Invalid FLAG value.');\n        RETURN;\n    END IF;\n    \n    IF P_TARGET_ID IS NULL THEN\n        DBMS_OUTPUT.PUT_LINE('No target PLAN_ID found for the specified FLAG direction.');\n        RETURN;\n    END IF;\n\n    BEGIN\n        SELECT JOB_NO INTO P_TARGET_JOB_NO \n        FROM TB_MES_OSQ \n        WHERE PLAN_ID = P_TARGET_ID AND MAT_NUM - CHARGEDNUM > 0 AND work_STATUS = 'N';\n    EXCEPTION\n        WHEN NO_DATA_FOUND THEN\n            DBMS_OUTPUT.PUT_LINE('No JOB_NO found for the target PLAN_ID.');\n            RETURN;\n    END;\n\n    SAVEPOINT SP_BEFORE_UPDATES;\n    \n    UPDATE TB_MES_OSQ \n    SET PLAN_ID = P_TARGET_ID \n    WHERE JOB_NO = P_JOB_NO AND MAT_NUM - CHARGEDNUM > 0 AND work_STATUS = 'N';\n\n    IF SQL%ROWCOUNT = 0 THEN\n        ROLLBACK TO SP_BEFORE_UPDATES;\n        DBMS_OUTPUT.PUT_LINE('No rows updated for original JOB_NO.');\n        RETURN;\n    END IF;\n\n    UPDATE TB_MES_OSQ \n    SET PLAN_ID = P_ID \n    WHERE JOB_NO = P_TARGET_JOB_NO AND MAT_NUM - CHARGEDNUM > 0 AND work_STATUS = 'N';\n\n    IF SQL%ROWCOUNT = 0 THEN\n        ROLLBACK TO SP_BEFORE_UPDATES;\n        DBMS_OUTPUT.PUT_LINE('No rows updated for target JOB_NO.');\n        RETURN;\n    END IF;\n\n    COMMIT;\nEXCEPTION\n    WHEN OTHERS THEN\n        ROLLBACK;\n        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);\n        RAISE;\nEND UpDown;\n/\n"
        }
      ],
      "id": "-FuV_nv8",
      "createdAt": 1729643891924,
      "updatedAt": 1730085455079
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "a3J2dD70",
      "tagsIds": [
        "h7D4WfdH",
        "TBUFZU0p",
        "JNoXREVd"
      ],
      "description": null,
      "name": "刷新序号",
      "content": [
        {
          "label": "子片段 1",
          "language": "sql",
          "value": "CREATE OR REPLACE PROCEDURE FCEL2.REFRESH_ID IS\n     -- 声明游标以存储查询结果\n  CURSOR c_osq_data IS\n  SELECT PLAN_ID,\n         RLNO,\n         JOB_NO\n    FROM FCE.TB_MES_OSQ\n   WHERE WORK_STATUS = 'N' AND (MAT_NUM - CHARGEDNUM) > 0\n   ORDER BY PLAN_ID ASC\n   FOR UPDATE; \n\n\n  -- 变量声明\n  v_new_plan_id NUMBER := 1;\n  v_has_duplicates NUMBER := 0; -- 使用NUMBER类型用于存储重复记录计数\n\nBEGIN\n  -- 检查是否存在重复的PLAN_ID\n  BEGIN\n    SELECT COUNT(*)\n      INTO v_has_duplicates\n      FROM (SELECT PLAN_ID\n              FROM FCE.TB_MES_OSQ\n             WHERE WORK_STATUS = 'N' AND (MAT_NUM - CHARGEDNUM) > 0\n             GROUP BY PLAN_ID\n            HAVING COUNT(*) > 1);\n\n    IF v_has_duplicates = 0 THEN\n      RETURN;\n    END IF;\n  END;\nFOR V_PLAN IN c_osq_data\nLOOP \n    UPDATE FCE.TB_MES_OSQ SET PLAN_ID = v_new_plan_id WHERE RLNO=V_PLAN.RLNO AND JOB_NO=V_PLAN.JOB_NO;\n    v_new_plan_id := v_new_plan_id+1;\nEND LOOP; \nUPDATE FCE.TB_MES_OSQ\n    SET JOB_NO = RAWTOHEX(SYS_GUID())\n    WHERE JOB_NO IS NULL OR TRIM(JOB_NO) IN ('', ' ');\n  COMMIT;\n\nEXCEPTION\n  WHEN OTHERS THEN\n    -- 处理异常\n    ROLLBACK;\n    RAISE;\n\nEND REFRESH_ID;\n/\n"
        }
      ],
      "id": "OhfVjPBc",
      "createdAt": 1729643928480,
      "updatedAt": 1729643994487
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "VIyR4X19",
        "oygN_nu5",
        "9n38nhki"
      ],
      "description": null,
      "name": "计算时间差",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <chrono>\n\nint diffInMinutes(const std::string& dt1, const std::string& dt2) {\n\tstd::tm tm1 = {}, tm2 = {};\n\n\tstd::istringstream ss1(dt1);\n\tstd::istringstream ss2(dt2);\n\n\t// 设置期望的输入格式\n\tss1 >> std::get_time(&tm1, \"%Y/%m/%d %H:%M:%S\");\n\tss2 >> std::get_time(&tm2, \"%Y/%m/%d %H:%M:%S\");\n\n\tif (ss1.fail() || ss2.fail()) {\n\t\tstd::cerr << \"Failed to parse date and time.\" << std::endl;\n\t\treturn 0;  // 返回0表示解析失败\n\t}\n\n\t// 将tm结构转换为time_point\n\tauto tp1 = std::chrono::system_clock::from_time_t(std::mktime(&tm1));\n\tauto tp2 = std::chrono::system_clock::from_time_t(std::mktime(&tm2));\n\n\t// 计算时间差并转换为分钟\n\tauto duration = std::chrono::duration_cast<std::chrono::minutes>(tp2 - tp1);\n\treturn duration.count();\n}"
        }
      ],
      "id": "CjqKgRAa",
      "createdAt": 1730339911771,
      "updatedAt": 1730340092298
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "DUqKYFET"
      ],
      "description": null,
      "name": "保留小数位数",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "#include <iostream>\n#include <iomanip>  // 包含 iomanip 库\n\nint main() {\n    float NewTC = 37.456;  // 假设这是你的原始温度值\n    float temp_avg = NewTC;\n\n    // 设置输出格式为固定小数点表示法，并保留1位小数\n    std::cout << std::fixed << std::setprecision(1);\n\n    // 输出温度平均值\n    std::cout << \"Temperature Average: \" << temp_avg << \"°C\" << std::endl;\n\n    return 0;\n}"
        }
      ],
      "id": "Ks4rGB_6",
      "createdAt": 1730344213137,
      "updatedAt": 1730344231153
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "U3Hc3PzY",
        "DxiRA4Ci"
      ],
      "description": null,
      "name": "四舍五入",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "#include <cmath>  // 包含 cmath 库\n\n// 四舍五入到1位小数\ntemp_avg = std::round(temp_avg * 10) / 10;"
        }
      ],
      "id": "acsjnQ8V",
      "createdAt": 1730344451996,
      "updatedAt": 1730344475288
    }
  ],
  "tags": [
    {
      "name": "PCDP",
      "id": "qiJo0wF7",
      "createdAt": 1721957224538,
      "updatedAt": 1721957224538
    },
    {
      "name": "数据库",
      "id": "tympKbpW",
      "createdAt": 1723959545872,
      "updatedAt": 1723959545872
    },
    {
      "name": "数据库查询",
      "id": "wiCDG8SZ",
      "createdAt": 1723959563524,
      "updatedAt": 1723959563524
    },
    {
      "name": "数据库事务",
      "id": "V6iF2I4j",
      "createdAt": 1723959573962,
      "updatedAt": 1723959573962
    },
    {
      "name": "平滑算法",
      "id": "olQfjjLQ",
      "createdAt": 1723959591206,
      "updatedAt": 1723959591206
    },
    {
      "name": "中位数平滑",
      "id": "VqKC7a91",
      "createdAt": 1723961926870,
      "updatedAt": 1723961926870
    },
    {
      "name": "部分排序",
      "id": "877M1sfA",
      "createdAt": 1723961933250,
      "updatedAt": 1723961933250
    },
    {
      "name": "完全排序",
      "id": "-5hHasNq",
      "createdAt": 1723962202384,
      "updatedAt": 1723962202384
    },
    {
      "name": "分位数",
      "id": "6DGis_cO",
      "createdAt": 1723962208125,
      "updatedAt": 1723962208125
    },
    {
      "name": "平均值计算",
      "id": "oymDhoMO",
      "createdAt": 1723962667492,
      "updatedAt": 1723962667492
    },
    {
      "name": "读取ini",
      "id": "dZIEd2vu",
      "createdAt": 1723991619240,
      "updatedAt": 1723991619240
    },
    {
      "name": "写入ini",
      "id": "6_2rdfLQ",
      "createdAt": 1723992684621,
      "updatedAt": 1723992684621
    },
    {
      "name": "web",
      "id": "tO8O6gJG",
      "createdAt": 1724812409449,
      "updatedAt": 1724812409449
    },
    {
      "name": "post",
      "id": "5vjFnMST",
      "createdAt": 1724812411792,
      "updatedAt": 1724812411792
    },
    {
      "name": "数据库过程",
      "id": "rNP4l83Z",
      "createdAt": 1725846862048,
      "updatedAt": 1725846862048
    },
    {
      "name": "定时执行",
      "id": "1q3yNmto",
      "createdAt": 1726740745042,
      "updatedAt": 1726740745042
    },
    {
      "name": "指数移动平均滤波",
      "id": "bVFKybKW",
      "createdAt": 1727100326884,
      "updatedAt": 1727100326884
    },
    {
      "name": "EMA",
      "id": "0NHs4HLy",
      "createdAt": 1727100336059,
      "updatedAt": 1727100336059
    },
    {
      "name": "获取返回数据量",
      "id": "1Jb6lpUM",
      "createdAt": 1727492973761,
      "updatedAt": 1727492973761
    },
    {
      "name": "字段值唯一判断",
      "id": "mFoRiI9Z",
      "createdAt": 1729602635710,
      "updatedAt": 1729602635710
    },
    {
      "name": "uid",
      "id": "FpyQ_9eV",
      "createdAt": 1729602672901,
      "updatedAt": 1729602672901
    },
    {
      "name": "空值jiance",
      "id": "RzQcsckp",
      "createdAt": 1729602678450,
      "updatedAt": 1729602678450
    },
    {
      "name": "空值赋uid",
      "id": "uls7FV_M",
      "createdAt": 1729602683013,
      "updatedAt": 1729602683013
    },
    {
      "name": "交换计划",
      "id": "l9soUARk",
      "createdAt": 1729643868789,
      "updatedAt": 1729643868789
    },
    {
      "name": "PL/SQL",
      "id": "tKcP8dhW",
      "createdAt": 1729643875281,
      "updatedAt": 1729643875281
    },
    {
      "name": "上移",
      "id": "unl4Q6rt",
      "createdAt": 1729643905291,
      "updatedAt": 1729643905291
    },
    {
      "name": "下移",
      "id": "Gfqv_F--",
      "createdAt": 1729643907043,
      "updatedAt": 1729643907043
    },
    {
      "name": "刷新序号",
      "id": "h7D4WfdH",
      "createdAt": 1729643960056,
      "updatedAt": 1729643960056
    },
    {
      "name": "字段唯一检测",
      "id": "TBUFZU0p",
      "createdAt": 1729643980089,
      "updatedAt": 1729643980089
    },
    {
      "name": "序号重排",
      "id": "JNoXREVd",
      "createdAt": 1729643994417,
      "updatedAt": 1729643994417
    },
    {
      "name": "时间差",
      "id": "VIyR4X19",
      "createdAt": 1730339931181,
      "updatedAt": 1730339931181
    },
    {
      "name": "数据库时间",
      "id": "oygN_nu5",
      "createdAt": 1730339934070,
      "updatedAt": 1730339934070
    },
    {
      "name": "C++sysdate",
      "id": "9n38nhki",
      "createdAt": 1730339939742,
      "updatedAt": 1730339939742
    },
    {
      "name": "浮点数精确度",
      "id": "DUqKYFET",
      "createdAt": 1730344231085,
      "updatedAt": 1730344231085
    },
    {
      "name": "四舍五入",
      "id": "U3Hc3PzY",
      "createdAt": 1730344465784,
      "updatedAt": 1730344465784
    },
    {
      "name": "保留1位小数",
      "id": "DxiRA4Ci",
      "createdAt": 1730344475225,
      "updatedAt": 1730344475225
    }
  ]
}