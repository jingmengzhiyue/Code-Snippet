{
  "folders": [
    {
      "id": "a3J2dD70",
      "name": "SQL",
      "defaultLanguage": "sql",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "createdAt": 1721914781261,
      "updatedAt": 1721971028536,
      "index": 0
    },
    {
      "name": "C/C++",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "c_cpp",
      "id": "Yw8pt8qI",
      "createdAt": 1721915030887,
      "updatedAt": 1721971034631,
      "index": 1
    },
    {
      "name": "Python",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "python",
      "id": "cJDhE0wQ",
      "createdAt": 1721915043541,
      "updatedAt": 1721971046478,
      "index": 2
    },
    {
      "name": "HTML",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "html",
      "id": "H4Pcaroy",
      "createdAt": 1721915054654,
      "updatedAt": 1721971056862,
      "index": 3
    },
    {
      "name": "CSS",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "css",
      "id": "deX-NgHx",
      "createdAt": 1721915061449,
      "updatedAt": 1721971063902,
      "index": 4
    },
    {
      "name": "Vue",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "vue",
      "id": "ISb5bYG8",
      "createdAt": 1721915067426,
      "updatedAt": 1721971079012,
      "index": 5
    },
    {
      "name": "JavaScript",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "javascript",
      "id": "0UbdBBJN",
      "createdAt": 1721971080945,
      "updatedAt": 1721971097751
    },
    {
      "name": "C#",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "csharp",
      "id": "DscWMix7",
      "createdAt": 1721971101423,
      "updatedAt": 1721971116436
    },
    {
      "name": "Java",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "java",
      "id": "1VrLx0IY",
      "createdAt": 1721971147366,
      "updatedAt": 1721971164420
    }
  ],
  "snippets": [
    {
      "isDeleted": false,
      "isFavorites": true,
      "folderId": "a3J2dD70",
      "tagsIds": [],
      "description": null,
      "name": "Oracle创建一个只能查询的新账户",
      "content": [
        {
          "label": "子片段 1",
          "language": "sql",
          "value": "-- 创建一个新用户，指定用户名，密码\nCREATE USER new_user IDENTIFIED BY your_password; \n-- 授予用户连接选项，不然用户无法连接数据库\nGRANT CONNECT TO new_user; \n-- 授予用户对某张表的查询权限\nGRANT SELECT ON schema_owner.ERP_SHEDULE_SHEET TO new_user; \nGRANT SELECT ON schema_owner.TRACK_MATERIAL TO new_user;"
        }
      ],
      "id": "lFXOrMMK",
      "createdAt": 1721914969710,
      "updatedAt": 1721957807137
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "qiJo0wF7",
        "wiCDG8SZ"
      ],
      "description": null,
      "name": "数据库操作",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "FormatString\ts;  // 定义格式化字符串方法\nconst char*\t\tsql; //定义一个数据库查询\n_CommandPtr\t\tcmd; // 数据库查询命令\n_RecordsetPtr\trs; // 数据库查询结果指针\n\nDatabase\tdba1(\"dba.udl\"); // 使用udl文件定义数据库连接\nif (dba.IsConnected() == false) // 鲁棒性判断，防止数据库没有连接成功\n\t{\n\t\tALARM(AL_WARNING, 1003, true, \"数据库连接已断开,重新连接。。。\");\n\t\tdba.Connect(\"dba.udl\");\n\t}\n\nsql = s(\"select SLAB_ID from TRACK_MATERIAL where ZONE_CODE = 4000 and XPOS = (select min(XPOS) from TRACK_MATERIAL where ZONE_CODE = 4000)\"); //  数据库查询命令书写\ncmd = dba.CreateCommand(); // 创建一个次年度数据库查询对象\ncmd->CommandText = (_bstr_t)sql; // 给对象中的查询语句赋值\nrs = cmd->Execute(NULL, 0, adCmdText); // 执行查询,获取查询结果的指针\n\n\nwhile (!rs->adoEOF)  // 在指针没有到结尾时，逐行处理数据\n\t{\n    /*\n    数据库操作代码，包括根据数据库读取结果进行变脸赋值，更新数据库中某一条目，\n    */\n\n\t\trs->MoveNext(); // 指针指向下一条数据\n\n\t}\n\tdba1.Disconnect(); // 断开数据库连接"
        }
      ],
      "id": "xJqmmXuE",
      "createdAt": 1721957199101,
      "updatedAt": 1723959563585
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "qiJo0wF7",
        "V6iF2I4j"
      ],
      "description": null,
      "name": "创建事务",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "dba.BeginTrans(\"dba.udl\"); // 连接数据库创建事务\nsql = s(\"insert into TB_PRODUCT_HIS select * from TB_PRODUCT where DISCHARGE_TIME<sysdate-90\");  // 事务语句\ncmd = dba.CreateCommand(); \ncmd->CommandText = (_bstr_t)sql;\ncmd->Execute(NULL, 0, adCmdText); // 执行查询\ndba.CommitTrans(\"dba.udl\"); 、// 事务提交\n// dba.RollbackTrans; 事务回滚"
        }
      ],
      "id": "Tue5u7oh",
      "createdAt": 1721959080848,
      "updatedAt": 1723959574026
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "olQfjjLQ",
        "VqKC7a91",
        "877M1sfA"
      ],
      "description": "对实时数据进行平滑，利用历史数据中的中位数代替实时数据，减缓数据的波动",
      "name": "中位数平滑算法",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "//! 创建一个临时vector，将原始的数据导入进来\nstd::vector<float> sortedBuffer = dataBuffer; \n//! deque 向vector赋值需要使用如下方式\nstd::vector<float> sortedBuffer(dataBuffer.begin(), dataBuffer.end());\n/**\n * @brief 部分排序一个序列\n *\n * 使得第n个元素（称为枢轴）放置在正确的位置上，使得所有在它左边的元素都不大于它，\n * 所有在它右边的元素都不小于它。这个操作并不保证除了这个枢轴位置以外的其他元素是排序好的。\n *\n * @param sortedBuffer.begin() 指定了要操作的序列的开始位置\n * @param sortedBuffer.begin()+sortedBuffer.size()/2 指定了你想要正确放置的元素的位置，也就是中位数的位置。\n * 由于sortedBuffer.size()/2取的是整数除法的结果，所以当容器大小是偶数时，这个位置实际上是指向了两个中间值中的后一个。\n * @param sortedBuffer.end() 指定了要操作的序列的结束位置\n */\nstd::nth_element(sortedBuffer.begin(), sortedBuffer.begin() + sortedBuffer.size()/2, sortedBuffer.end()); \n//! 获取中位数值\nfloat medianValue = sortedBuffer[sortedBuffer.size()/2];"
        }
      ],
      "id": "Kdku6H2O",
      "createdAt": 1723959504976,
      "updatedAt": 1723962164207
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "",
      "tagsIds": [],
      "description": null,
      "name": "",
      "content": [
        {
          "label": "子片段 1",
          "language": "plain_text",
          "value": ""
        }
      ],
      "id": "UpTPvDmW",
      "createdAt": 1723962167307,
      "updatedAt": 1723962177756
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "olQfjjLQ",
        "-5hHasNq",
        "6DGis_cO"
      ],
      "description": null,
      "name": "分位数平滑算法",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "#include <vector>\n#include <algorithm>\nstd::vector<float> data = { /* 初始化你的数据 */ };\n\n//! 首先对向量进行排序，默认进行升序排列\nstd::sort(data.begin(), data.end());\n\n//! 降序排序算法\n// std::sort(data.begin(), data.end(), [](float a, float b) { return a > b; }); // 降序排序\n//! 计算截取的起始和结束位置\nsize_t start = data.size() * 0.30;\nsize_t end = data.size() * 0.60;\n\n// 确保start和end在有效范围内\nif (start > data.size()) start = data.size();\nif (end > data.size()) end = data.size();\n\n// 截取30%到60%的数据\nstd::vector<float> sliced_data(data.begin() + start, data.begin() + end);\n"
        }
      ],
      "id": "78TbSqQt",
      "createdAt": 1723962180806,
      "updatedAt": 1723962561165
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "oymDhoMO"
      ],
      "description": null,
      "name": "计算平均值",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "//! 创建向量数据\nstd::vector<float> sliced_data = { /* 初始化你的数据，例如：1.0f, 2.0f, 3.0f, 4.0f, 5.0f */ };\n\n//! 累加器清空\nfloat sum = 0.0f;\n\n//! 使用auto快速遍历累加\nfor (const auto& value : sliced_data) {\n\tsum += value;\n}\n//! 除以元素个数\nfloat average = sum / sliced_data.size();"
        }
      ],
      "id": "09jg2uO8",
      "createdAt": 1723962591080,
      "updatedAt": 1723965020795
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "dZIEd2vu",
        "6_2rdfLQ"
      ],
      "description": null,
      "name": "读取INI文件",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <string>\n#include <unordered_map>\n#include <map>\n\n/**\n * @brief A class to read and parse INI configuration files.\n */\nclass INIReader\n{\npublic:\n    /**\n     * @brief Loads and parses an INI file.\n     *\n     * This function reads the INI file line by line, identifies sections and key-value pairs,\n     * and stores them in an internal data structure for later retrieval.\n     *\n     * @param filename The path to the INI file to load.\n     * @return true if the file was successfully loaded and parsed, false otherwise.\n     */\n    bool Load(const std::string &filename)\n    {\n        std::ifstream file(filename);\n        if (!file.is_open())\n        {\n            std::cerr << \"Could not open file: \" << filename << std::endl;\n            return false;\n        }\n\n        std::string line;\n        std::string currentSection;\n        while (std::getline(file, line))\n        {\n            line = Trim(line);\n\n            // Skip empty lines and comments\n            if (line.empty() || line[0] == ';' || line[0] == '#')\n            {\n                continue;\n            }\n\n            // Identify section headers\n            if (line.front() == '[' && line.back() == ']')\n            {\n                currentSection = line.substr(1, line.size() - 2);\n            }\n            else\n            {\n                // Identify key-value pairs\n                auto delimiterPos = line.find('=');\n                if (delimiterPos != std::string::npos)\n                {\n                    std::string key = Trim(line.substr(0, delimiterPos));\n                    std::string value = Trim(line.substr(delimiterPos + 1));\n                    data[currentSection][key] = value;\n                }\n            }\n        }\n\n        file.close();\n        return true;\n    }\n\n    /**\n     * @brief Retrieves a value from the INI file based on section and key.\n     *\n     * If the section or key does not exist, this function will return a default value.\n     *\n     * @param section The section name where the key is located.\n     * @param key The key whose value is to be retrieved.\n     * @param defaultValue The default value to return if the key is not found (optional).\n     * @return The value corresponding to the key, or the default value if the key is not found.\n     */\n    std::string Get(const std::string &section, const std::string &key, const std::string &defaultValue = \"\") const\n    {\n        auto sectionIt = data.find(section);\n        if (sectionIt != data.end())\n        {\n            auto keyIt = sectionIt->second.find(key);\n            if (keyIt != sectionIt->second.end())\n            {\n                return keyIt->second;\n            }\n        }\n        return defaultValue;\n    }\n\n    /**\n     * @brief Sets a value in the INI configuration.\n     * @param section The section name where the key is located.\n     * @param key The key whose value is to be set.\n     * @param value The value to set for the specified key.\n     */\n    void Set(const std::string &section, const std::string &key, const std::string &value)\n    {\n        data[section][key] = value;\n    }\n\n    /**\n     * @brief Writes the current configuration to an INI file.\n     * @param filename The path to the INI file to write.\n     * @return true if the file was successfully written, false otherwise.\n     */\n    bool Save(const std::string &filename) const\n    {\n        std::ofstream file(filename);\n        if (!file.is_open())\n        {\n            std::cerr << \"Could not open file: \" << filename << std::endl;\n            return false;\n        }\n\n        for (const auto &sectionPair : data)\n        {\n            file << \"[\" << sectionPair.first << \"]\\n\";\n            for (const auto &kv : sectionPair.second)\n            {\n                file << kv.first << \" = \" << kv.second << \"\\n\";\n            }\n            file << \"\\n\";\n        }\n\n        file.close();\n        return true;\n    }\n\nprivate:\n    /**\n     * @brief A map to store sections and their corresponding key-value pairs.\n     *\n     * The outer map's key is the section name, and the inner map stores key-value pairs within that section.\n     */\n    std::unordered_map<std::string, std::map<std::string, std::string>> data;\n\n    /**\n     * @brief Trims whitespace from both ends of a string.\n     *\n     * This utility function removes leading and trailing whitespace characters\n     * (spaces and tabs) from the given string.\n     *\n     * @param str The string to trim.\n     * @return A new string with leading and trailing whitespace removed.\n     */\n    static std::string Trim(const std::string &str)\n    {\n        const std::string whitespace = \" \\t\";\n        const auto strBegin = str.find_first_not_of(whitespace);\n        if (strBegin == std::string::npos)\n        {\n            return \"\"; // No content\n        }\n\n        const auto strEnd = str.find_last_not_of(whitespace);\n        const auto strRange = strEnd - strBegin + 1;\n\n        return str.substr(strBegin, strRange);\n    }\n};\n\n/**\n * @brief Entry point for the INI reader program.\n *\n * This main function demonstrates how to load an INI file and retrieve values\n * from it using the INIReader class.\n *\n * @return int Returns 0 on successful execution.\n */\n\nint main()\n{\n    INIReader reader;\n\n    // 加载配置文件\n    if (reader.Load(\"config.ini\"))\n    {\n        std::string host = reader.Get(\"network\", \"host\", \"localhost\");\n        std::string port = reader.Get(\"network\", \"port\", \"8080\");\n\n        std::cout << \"Host: \" << host << std::endl;\n        std::cout << \"Port: \" << port << std::endl;\n\n        // 修改配置并保存\n        reader.Set(\"network\", \"host\", \"10.0.0.1\");\n        reader.Set(\"network\", \"port\", \"9090\");\n        reader.Save(\"config_modified.ini\");\n\n        std::cout << \"Updated configuration saved to config_modified.ini\" << std::endl;\n    }\n\n    return 0;\n}"
        }
      ],
      "id": "HEiOTpNN",
      "createdAt": 1723991600741,
      "updatedAt": 1723992684700
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Yw8pt8qI",
      "tagsIds": [
        "tO8O6gJG",
        "5vjFnMST"
      ],
      "description": null,
      "name": "POST请求",
      "content": [
        {
          "label": "子片段 1",
          "language": "c_cpp",
          "value": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <curl/curl.h>\n#include <json/json.h>\n\n/**\n * @brief 回调函数，用于接收 HTTP 响应\n * @param contents 接收到的数据内容\n * @param size 每个数据块的大小\n * @param nmemb 数据块的数量\n * @param s 用于存储接收到的数据的字符串指针\n * @return 实际处理的数据大小\n */\nstatic size_t WriteCallback(void* contents, size_t size, size_t nmemb, std::string* s) {\n\tsize_t newLength = size * nmemb;\n\ttry {\n\t\ts->append((char*)contents, newLength);\n\t}\n\tcatch (std::bad_alloc&) {\n\t\t// 内存分配失败时返回0\n\t\treturn 0;\n\t}\n\treturn newLength;\n}\n\n/**\n * @brief 发送 POST 请求并返回响应内容\n * @param url 请求的 URL\n * @param jsonData 请求的 JSON 数据\n * @return 服务器的响应内容\n */\nstd::string sendPostRequest(const std::string& url, const std::string& jsonData) {\n\tCURL* curl;\n\tCURLcode res;\n\tstd::string readBuffer;\n\n\tcurl_global_init(CURL_GLOBAL_DEFAULT);\n\tcurl = curl_easy_init();\n\tif (curl) {\n\t\tstruct curl_slist* headers = nullptr;\n\t\theaders = curl_slist_append(headers, \"Content-Type: application/json\");\n\n\t\tcurl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n\t\tcurl_easy_setopt(curl, CURLOPT_POSTFIELDS, jsonData.c_str());\n\t\tcurl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n\t\tcurl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);\n\t\tcurl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);\n\n\t\tres = curl_easy_perform(curl);\n\t\tif (res != CURLE_OK) {\n\t\t\tstd::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n      // 添加以下4行代码可以在出错时立刻返回空串\n      curl_easy_cleanup(curl);\n\t\t\tcurl_slist_free_all(headers);\n\t\t\tcurl_global_cleanup();\n\t\t\treturn \"\"; // 直接返回，退出函数\n\t\t}\n\n\t\tcurl_easy_cleanup(curl);\n\t\tcurl_slist_free_all(headers);\n\t}\n\tcurl_global_cleanup();\n\n\treturn readBuffer;\n}\n\n/**\n * @brief 解析 JSON 响应并提取特定内容\n * @param jsonResponse 需要解析的 JSON 字符串\n * @return 提取的 JSON 数据\n */\nJson::Value parseJsonResponse(const std::string& jsonResponse) {\n\tJson::CharReaderBuilder readerBuilder;\n\tJson::Value root;\n\tstd::string errs;\n\tstd::istringstream ss(jsonResponse);\n\n\tif (!Json::parseFromStream(readerBuilder, ss, &root, &errs)) {\n\t\tstd::cerr << \"Failed to parse JSON: \" << errs << std::endl;\n    return Json::nullValue;  // 解析失败时返回空值\n\t}\n\n\t// 提取特定路径下的数据\n\treturn root[\"__blocks__\"][\"result\"][\"rows\"];\n}\n\n/**\n * @brief 映射 JSON 记录到字段名并输出\n * @param rows 包含多条记录的 JSON 数组\n */\nvoid mapAndPrintRows(const Json::Value& rows) {\n\t// 定义字段名\n\tstd::vector<std::string> fieldNames = {\n\t\t\"FactoryPSC\", \"HeatNo\", \"JobNo\", \"JodCutPlanNo\", \"LJ1FLAG\",\n\t\t\"MatNum\", \"PlanNum\", \"RLNO\", \"SlowCoolingTime\",\n\t\t\"StartDateTime\", \"StartStayDateTime\", \"Status\",\n\t\t\"StayTime\", \"WasteNum\"\n\t};\n\n\t// 遍历每一条记录\n\tfor (const auto& row : rows) {\n\t\tstd::map<std::string, std::string> recordMap;\n\n\t\t// 将每个值映射到相应的字段名\n\t\tfor (size_t i = 0; i < row.size() && i < fieldNames.size(); ++i) {\n\t\t\trecordMap[fieldNames[i]] = row[i].asString();\n\t\t}\n\n\t\t// 输出记录\n\t\tstd::cout << \"Record:\" << std::endl;\n\t\tfor (const auto& field : fieldNames) {\n\t\t\tstd::cout << \"  \" << field << \": \" << recordMap[field] << std::endl;\n\t\t}\n\t\tstd::cout << std::endl;\n\t}\n}\n\n/**\n * @brief 主函数\n * @return 程序退出状态\n */\nint main() {\n\t// 设置 URL 和 POST 请求数据\n\tstd::string url = \"http://10.38.98.30:8080/iplat/service/S_BI_XA_0306\";\n\tstd::string jsonData = R\"({\n        \"subjectEname\": \"OperationStoreQuery\",\n        \"offset\": \"0\",\n        \"limit\": \"1000\",\n        \"dataFormat\": \"inInfo\",\n        \"paramType\": \"unify\",\n        \"queryParamUnify\": {\n            \"whole_backlog_code\": \"120\",\n            \"jod_work_center\": \"04\"\n        }\n    })\";\n\n\t// 发送 POST 请求\n\tstd::string response = sendPostRequest(url, jsonData);\n\n\t// 解析响应并提取所需内容\n\tJson::Value rows = parseJsonResponse(response);\n\n\t// 映射并输出结果\n\tmapAndPrintRows(rows);\n\n\treturn 0;\n}\n\n"
        }
      ],
      "id": "cbhlrf2z",
      "createdAt": 1724812389483,
      "updatedAt": 1724851188172
    }
  ],
  "tags": [
    {
      "name": "PCDP",
      "id": "qiJo0wF7",
      "createdAt": 1721957224538,
      "updatedAt": 1721957224538
    },
    {
      "name": "数据库",
      "id": "tympKbpW",
      "createdAt": 1723959545872,
      "updatedAt": 1723959545872
    },
    {
      "name": "数据库查询",
      "id": "wiCDG8SZ",
      "createdAt": 1723959563524,
      "updatedAt": 1723959563524
    },
    {
      "name": "数据库事务",
      "id": "V6iF2I4j",
      "createdAt": 1723959573962,
      "updatedAt": 1723959573962
    },
    {
      "name": "平滑算法",
      "id": "olQfjjLQ",
      "createdAt": 1723959591206,
      "updatedAt": 1723959591206
    },
    {
      "name": "中位数平滑",
      "id": "VqKC7a91",
      "createdAt": 1723961926870,
      "updatedAt": 1723961926870
    },
    {
      "name": "部分排序",
      "id": "877M1sfA",
      "createdAt": 1723961933250,
      "updatedAt": 1723961933250
    },
    {
      "name": "完全排序",
      "id": "-5hHasNq",
      "createdAt": 1723962202384,
      "updatedAt": 1723962202384
    },
    {
      "name": "分位数",
      "id": "6DGis_cO",
      "createdAt": 1723962208125,
      "updatedAt": 1723962208125
    },
    {
      "name": "平均值计算",
      "id": "oymDhoMO",
      "createdAt": 1723962667492,
      "updatedAt": 1723962667492
    },
    {
      "name": "读取ini",
      "id": "dZIEd2vu",
      "createdAt": 1723991619240,
      "updatedAt": 1723991619240
    },
    {
      "name": "写入ini",
      "id": "6_2rdfLQ",
      "createdAt": 1723992684621,
      "updatedAt": 1723992684621
    },
    {
      "name": "web",
      "id": "tO8O6gJG",
      "createdAt": 1724812409449,
      "updatedAt": 1724812409449
    },
    {
      "name": "post",
      "id": "5vjFnMST",
      "createdAt": 1724812411792,
      "updatedAt": 1724812411792
    }
  ]
}